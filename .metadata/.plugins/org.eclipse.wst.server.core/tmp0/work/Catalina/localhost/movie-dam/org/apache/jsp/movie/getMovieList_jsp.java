/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.50
 * Generated at: 2018-09-23 08:03:15 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.movie;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class getMovieList_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("$(document).ready(function() {\r\n");
      out.write("\tfunction Request() {\r\n");
      out.write("\t\tvar requestParam = \"\";\r\n");
      out.write("\t\tthis.getParameter = function(param) {\r\n");
      out.write("\t\t\t//현재 주소를 decoding\r\n");
      out.write("\t\t\tvar url = unescape(location.href);\r\n");
      out.write("\t\t\t//파라미터만 자르고, 다시 &그분자를 잘라서 배열에 넣는다. \r\n");
      out.write("\t\t\tvar paramArr = (url.substring(url.indexOf(\"?\")+1,url.length)).split(\"&\"); \r\n");
      out.write("\t\t\t\tfor(var i = 0 ; i < paramArr.length ; i++){\r\n");
      out.write("\t\t\t\t\tvar temp = paramArr[i].split(\"=\"); //파라미터 변수명을 담음\r\n");
      out.write("\t\t\t\t\tif(temp[0].toUpperCase() == param.toUpperCase()){\r\n");
      out.write("\t\t\t\t\t       // 변수명과 일치할 경우 데이터 삽입\r\n");
      out.write("\t\t\t\t\t       requestParam = paramArr[i].split(\"=\")[1]; \r\n");
      out.write("\t\t\t\t\t       break;\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\treturn requestParam;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\tvar request = new Request();\r\n");
      out.write("\tvar page = request.getParemeter(\"resultPage\");\r\n");
      out.write("\tvar sort = request.getParameter(\"sort\");\r\n");
      out.write("\t\r\n");
      out.write("\tvar settings = {\r\n");
      out.write("\t  \tasync: true,\r\n");
      out.write("\t  \tcrossDomain: true,\r\n");
      out.write("\t  \turl: 'https://api.themoviedb.org/3/discover/movie',\r\n");
      out.write("\t\tmethod: 'GET',\r\n");
      out.write("\t  \tdata: {\r\n");
      out.write("\t\t\t'page': '1',\r\n");
      out.write("\t\t  \t'include_video': 'false',\r\n");
      out.write("\t\t  \t'include_adult': 'false',\r\n");
      out.write("\t\t  \t'sort_by': sort+'.desc',\r\n");
      out.write("\t\t  \t'region': 'KR',\r\n");
      out.write("\t\t  \t'language': 'ko-KR',\r\n");
      out.write("\t\t  \t'api_key': '9dd279523f7113a4103a8f1e9ef6abe3'\r\n");
      out.write("\t  \t},\r\n");
      out.write("\t  \tdataType: 'json',\r\n");
      out.write("\t  \theaders: {}\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\t$.ajax(settings).done(function (response) {\r\n");
      out.write("\t\tconsole.log(response);\r\n");
      out.write("  \t\t$('.lead').html('총 '+response.total_results+'개의 작품 검색');\r\n");
      out.write("  \t\tvar rs = [];\r\n");
      out.write("  \t\tvar hoverList = new Array();\r\n");
      out.write("  \t\t\r\n");
      out.write("  \t\tvar settings2 = {\r\n");
      out.write("\t\t  \"async\": true,\r\n");
      out.write("\t\t  \"crossDomain\": true,\r\n");
      out.write("\t\t  \"url\": \"https://api.themoviedb.org/3/genre/movie/list?language=ko-KR&api_key=9dd279523f7113a4103a8f1e9ef6abe3\",\r\n");
      out.write("\t\t  \"method\": \"GET\",\r\n");
      out.write("\t\t  \"headers\": {},\r\n");
      out.write("\t\t  \"data\": \"{}\"\r\n");
      out.write("\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t$.ajax(settings2).done(function (response2) {\r\n");
      out.write("\t\t  console.log(response2);\r\n");
      out.write("\t\t});\r\n");
      out.write("  \r\n");
      out.write("  \t\tfor(var i=0; i<response['results'].length; i++) {\r\n");
      out.write("  \t\t\t\r\n");
      out.write("  \t\t\tvar data = new Object();\r\n");
      out.write("  \t\t\tdata.index = i;\r\n");
      out.write("  \t\t\tdata.overview = response['results'][i]['overview'];\r\n");
      out.write("  \t\t\tdata.popularity = response['results'][i]['popularity'];\r\n");
      out.write("  \t\t\thoverList.push(data);\r\n");
      out.write("  \t\t\t  \t\t\t\r\n");
      out.write("  \t\t\trs.push('<div class=\"card mb-3 col-lg-4 hvr-fade\">');\r\n");
      out.write("  \t\t\trs.push('<h4 class=\"card-header\">'+response['results'][i]['title']+'</h4>');\r\n");
      out.write("  \t\t\tif(response['results'][i]['poster_path'] == null) {\r\n");
      out.write("  \t\t  \t\trs.push('<img style=\"width: 100%; display: block;\" src=\"https://via.placeholder.com/350x500?text=dont+find+poster\" alt=\"Card image\">');\r\n");
      out.write("  \t\t\t} else {\r\n");
      out.write("  \t\t  \t\trs.push('<img style=\"width: 100%; display: block;\" src=\"https://image.tmdb.org/t/p/original/'+response['results'][i]['poster_path']+'\" alt=\"Card image\">');\r\n");
      out.write("  \t\t\t}\r\n");
      out.write("  \t\t  \trs.push('<ul class=\"list-group list-group-flush\">');\r\n");
      out.write("\t\t\trs.push('<li class=\"list-group-item\" id=\"genre\">장르 '+response['results'][i]['genre_ids']+'</li>');\r\n");
      out.write("\t\t\trs.push('<li class=\"list-group-item\">개봉일 '+response['results'][i]['release_date']+'</li>');\r\n");
      out.write("\t\t\trs.push('</ul>');\r\n");
      out.write("/* \t\t\trs.push('<div class=\"card-body\">');\r\n");
      out.write("\t\t\trs.push('<a href=\"#\" class=\"card-link\">예매하기</a>');\r\n");
      out.write("\t\t\trs.push('<a href=\"#\" class=\"card-link\">상세보기</a>');\r\n");
      out.write("\t\t\trs.push('</div>'); */\r\n");
      out.write("\t\t\trs.push('</div>');\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t/* $.each(genresArray, function(index, item) {\r\n");
      out.write("\t\t\t\t$('#genre').html(item.join(','));\r\n");
      out.write("\t\t\t}); */\r\n");
      out.write("\r\n");
      out.write("  \t\t\t$('.hvr-fade').hover(function() {\r\n");
      out.write("  \t\t\t\t//\r\n");
      out.write("  \t\t\t}, function() {\r\n");
      out.write("  \t\t\t\t//\r\n");
      out.write("  \t\t\t});\r\n");
      out.write("\r\n");
      out.write("  \t  \t\t$('.row').html(rs.join(''));\r\n");
      out.write("  \t\t}\r\n");
      out.write("  \t\t\r\n");
      out.write("  \t\tvar jsonData = JSON.stringify(hoverList);\r\n");
      out.write("  \t\tconsole.log(jsonData);\r\n");
      out.write("\r\n");
      out.write("\t});\r\n");
      out.write("});\r\n");
      out.write("</script>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
